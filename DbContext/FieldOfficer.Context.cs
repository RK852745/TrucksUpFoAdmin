//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrucksUpFoAdmin.DbContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FieldOfficerEntities : DbContext
    {
        public FieldOfficerEntities()
            : base("name=FieldOfficerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FieldOfficerTracking> FieldOfficerTrackings { get; set; }
        public virtual DbSet<StickerMaster_Dhaba> StickerMaster_Dhaba { get; set; }
        public virtual DbSet<FieldOfficerMaster> FieldOfficerMasters { get; set; }
        public virtual DbSet<FieldOfficerMeeting> FieldOfficerMeetings { get; set; }
        public virtual DbSet<FieldOfficerVisitMaster> FieldOfficerVisitMasters { get; set; }
        public virtual DbSet<FieldOffiecrLocation> FieldOffiecrLocations { get; set; }
        public virtual DbSet<GeoLocationCordinate> GeoLocationCordinates { get; set; }
        public virtual DbSet<OwnerInfoMaster> OwnerInfoMasters { get; set; }
        public virtual DbSet<PreferredLocationMaster> PreferredLocationMasters { get; set; }
        public virtual DbSet<SharedLinkAudit> SharedLinkAudits { get; set; }
        public virtual DbSet<SQL_Error> SQL_Error { get; set; }
        public virtual DbSet<StickerMaster> StickerMasters { get; set; }
        public virtual DbSet<StickerVisitMaster> StickerVisitMasters { get; set; }
        public virtual DbSet<TblAwsImage> TblAwsImages { get; set; }
        public virtual DbSet<TblFODutyStatu> TblFODutyStatus { get; set; }
        public virtual DbSet<TruksupFOMobileNavigator> TruksupFOMobileNavigators { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserLoginToken> UserLoginTokens { get; set; }
        public virtual DbSet<VehicleInfoMaster> VehicleInfoMasters { get; set; }
        public virtual DbSet<VisitingCardMaster> VisitingCardMasters { get; set; }
    
        public virtual ObjectResult<AdminDasboardMaster_Result> AdminDasboardMaster(string mode, Nullable<long> userId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<long> fomid, string totalvisit, string owntype, string svisit, Nullable<long> fovmId, string name, string mobile, string altMobile, string email, string fullAddress, string employeeID, Nullable<long> ececutiveId, Nullable<long> createdBy, Nullable<long> executiveId, string username, string password, string xmluseridlist, string status, Nullable<int> employeeType, string remarks, Nullable<int> start, Nullable<int> length, string searchValue)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var fomidParameter = fomid.HasValue ?
                new ObjectParameter("fomid", fomid) :
                new ObjectParameter("fomid", typeof(long));
    
            var totalvisitParameter = totalvisit != null ?
                new ObjectParameter("totalvisit", totalvisit) :
                new ObjectParameter("totalvisit", typeof(string));
    
            var owntypeParameter = owntype != null ?
                new ObjectParameter("owntype", owntype) :
                new ObjectParameter("owntype", typeof(string));
    
            var svisitParameter = svisit != null ?
                new ObjectParameter("svisit", svisit) :
                new ObjectParameter("svisit", typeof(string));
    
            var fovmIdParameter = fovmId.HasValue ?
                new ObjectParameter("FovmId", fovmId) :
                new ObjectParameter("FovmId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var altMobileParameter = altMobile != null ?
                new ObjectParameter("AltMobile", altMobile) :
                new ObjectParameter("AltMobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fullAddressParameter = fullAddress != null ?
                new ObjectParameter("FullAddress", fullAddress) :
                new ObjectParameter("FullAddress", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var ececutiveIdParameter = ececutiveId.HasValue ?
                new ObjectParameter("EcecutiveId", ececutiveId) :
                new ObjectParameter("EcecutiveId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var executiveIdParameter = executiveId.HasValue ?
                new ObjectParameter("ExecutiveId", executiveId) :
                new ObjectParameter("ExecutiveId", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var xmluseridlistParameter = xmluseridlist != null ?
                new ObjectParameter("xmluseridlist", xmluseridlist) :
                new ObjectParameter("xmluseridlist", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminDasboardMaster_Result>("AdminDasboardMaster", modeParameter, userIdParameter, startdateParameter, enddateParameter, fomidParameter, totalvisitParameter, owntypeParameter, svisitParameter, fovmIdParameter, nameParameter, mobileParameter, altMobileParameter, emailParameter, fullAddressParameter, employeeIDParameter, ececutiveIdParameter, createdByParameter, executiveIdParameter, usernameParameter, passwordParameter, xmluseridlistParameter, statusParameter, employeeTypeParameter, remarksParameter, startParameter, lengthParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<string> DutyStatusupdate(Nullable<bool> dutystatus, Nullable<long> fieldofficerId)
        {
            var dutystatusParameter = dutystatus.HasValue ?
                new ObjectParameter("dutystatus", dutystatus) :
                new ObjectParameter("dutystatus", typeof(bool));
    
            var fieldofficerIdParameter = fieldofficerId.HasValue ?
                new ObjectParameter("fieldofficerId", fieldofficerId) :
                new ObjectParameter("fieldofficerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DutyStatusupdate", dutystatusParameter, fieldofficerIdParameter);
        }
    
        public virtual ObjectResult<getadmindatabydate_Result> getadmindatabydate(string startdate, string enddate)
        {
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getadmindatabydate_Result>("getadmindatabydate", startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<getAdminDetails_Result> getAdminDetails(string token, Nullable<long> userid)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAdminDetails_Result>("getAdminDetails", tokenParameter, useridParameter);
        }
    
        public virtual int GetCompletedMeeting(string mobile, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompletedMeeting", mobileParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetFOBrokerDetails_V1(string city)
        {
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFOBrokerDetails_V1", cityParameter);
        }
    
        public virtual ObjectResult<GetScheduledMeeting_Result> GetScheduledMeeting(string mobile)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScheduledMeeting_Result>("GetScheduledMeeting", mobileParameter);
        }
    
        public virtual ObjectResult<string> Pro_GetEncrptedKey(string mode)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pro_GetEncrptedKey", modeParameter);
        }
    
        public virtual int Pro_SQL_Error(string errorNumber, string errorState, string errorSeverity, string errorProcedure, string errorLine, string errorMessage)
        {
            var errorNumberParameter = errorNumber != null ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(string));
    
            var errorStateParameter = errorState != null ?
                new ObjectParameter("ErrorState", errorState) :
                new ObjectParameter("ErrorState", typeof(string));
    
            var errorSeverityParameter = errorSeverity != null ?
                new ObjectParameter("ErrorSeverity", errorSeverity) :
                new ObjectParameter("ErrorSeverity", typeof(string));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorLineParameter = errorLine != null ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pro_SQL_Error", errorNumberParameter, errorStateParameter, errorSeverityParameter, errorProcedureParameter, errorLineParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<Pro_UserLogin_Result> Pro_UserLogin(string token, string mode, string userIP, string userMacAddress, string deviceName, string platfrom, string username, string loginPin, string password, Nullable<int> userId, Nullable<int> partnerId, Nullable<long> org, Nullable<long> bid, Nullable<long> clientId)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var userIPParameter = userIP != null ?
                new ObjectParameter("UserIP", userIP) :
                new ObjectParameter("UserIP", typeof(string));
    
            var userMacAddressParameter = userMacAddress != null ?
                new ObjectParameter("UserMacAddress", userMacAddress) :
                new ObjectParameter("UserMacAddress", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var platfromParameter = platfrom != null ?
                new ObjectParameter("Platfrom", platfrom) :
                new ObjectParameter("Platfrom", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var loginPinParameter = loginPin != null ?
                new ObjectParameter("LoginPin", loginPin) :
                new ObjectParameter("LoginPin", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var orgParameter = org.HasValue ?
                new ObjectParameter("Org", org) :
                new ObjectParameter("Org", typeof(long));
    
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pro_UserLogin_Result>("Pro_UserLogin", tokenParameter, modeParameter, userIPParameter, userMacAddressParameter, deviceNameParameter, platfromParameter, usernameParameter, loginPinParameter, passwordParameter, userIdParameter, partnerIdParameter, orgParameter, bidParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<string> ProAddNewVisit(Nullable<long> fovmId, string name, string mobile, string emailId, string address, string ownType, string vehicleType, string vehiclecapacity, Nullable<int> vehicleCount, Nullable<System.DateTime> visitDate, string visitTime, string latitude, string longitude, string visitingCardUrl, Nullable<bool> activeFlag, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate, string stickeringStatus, Nullable<long> pLMId, string fromLoction, string toLocation, Nullable<long> viId, string vehicleSize, string xmlvehicleInfolist, string xmlprefloctaionlist, string mode, Nullable<long> fovid, string imagewithstickerurl, string imagewithownerurl, Nullable<System.DateTime> enddate, Nullable<System.DateTime> startdate, string company, string visitingCardUrlXML, string imagewithstickerurlXML, string imagewithownerurlXML, Nullable<long> userid, string status, string remarks, string vehicleOwnType, string isMobileVerified, string verifytype, string sharedSMS, Nullable<long> sharedBy, Nullable<System.DateTime> sharedDateTime, string sharedTo, string sMSDelivered)
        {
            var fovmIdParameter = fovmId.HasValue ?
                new ObjectParameter("FovmId", fovmId) :
                new ObjectParameter("FovmId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ownTypeParameter = ownType != null ?
                new ObjectParameter("OwnType", ownType) :
                new ObjectParameter("OwnType", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehiclecapacityParameter = vehiclecapacity != null ?
                new ObjectParameter("Vehiclecapacity", vehiclecapacity) :
                new ObjectParameter("Vehiclecapacity", typeof(string));
    
            var vehicleCountParameter = vehicleCount.HasValue ?
                new ObjectParameter("VehicleCount", vehicleCount) :
                new ObjectParameter("VehicleCount", typeof(int));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var visitTimeParameter = visitTime != null ?
                new ObjectParameter("VisitTime", visitTime) :
                new ObjectParameter("VisitTime", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var visitingCardUrlParameter = visitingCardUrl != null ?
                new ObjectParameter("VisitingCardUrl", visitingCardUrl) :
                new ObjectParameter("VisitingCardUrl", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var stickeringStatusParameter = stickeringStatus != null ?
                new ObjectParameter("StickeringStatus", stickeringStatus) :
                new ObjectParameter("StickeringStatus", typeof(string));
    
            var pLMIdParameter = pLMId.HasValue ?
                new ObjectParameter("PLMId", pLMId) :
                new ObjectParameter("PLMId", typeof(long));
    
            var fromLoctionParameter = fromLoction != null ?
                new ObjectParameter("FromLoction", fromLoction) :
                new ObjectParameter("FromLoction", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("ViId", viId) :
                new ObjectParameter("ViId", typeof(long));
    
            var vehicleSizeParameter = vehicleSize != null ?
                new ObjectParameter("VehicleSize", vehicleSize) :
                new ObjectParameter("VehicleSize", typeof(string));
    
            var xmlvehicleInfolistParameter = xmlvehicleInfolist != null ?
                new ObjectParameter("xmlvehicleInfolist", xmlvehicleInfolist) :
                new ObjectParameter("xmlvehicleInfolist", typeof(string));
    
            var xmlprefloctaionlistParameter = xmlprefloctaionlist != null ?
                new ObjectParameter("xmlprefloctaionlist", xmlprefloctaionlist) :
                new ObjectParameter("xmlprefloctaionlist", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var fovidParameter = fovid.HasValue ?
                new ObjectParameter("fovid", fovid) :
                new ObjectParameter("fovid", typeof(long));
    
            var imagewithstickerurlParameter = imagewithstickerurl != null ?
                new ObjectParameter("imagewithstickerurl", imagewithstickerurl) :
                new ObjectParameter("imagewithstickerurl", typeof(string));
    
            var imagewithownerurlParameter = imagewithownerurl != null ?
                new ObjectParameter("imagewithownerurl", imagewithownerurl) :
                new ObjectParameter("imagewithownerurl", typeof(string));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var visitingCardUrlXMLParameter = visitingCardUrlXML != null ?
                new ObjectParameter("VisitingCardUrlXML", visitingCardUrlXML) :
                new ObjectParameter("VisitingCardUrlXML", typeof(string));
    
            var imagewithstickerurlXMLParameter = imagewithstickerurlXML != null ?
                new ObjectParameter("imagewithstickerurlXML", imagewithstickerurlXML) :
                new ObjectParameter("imagewithstickerurlXML", typeof(string));
    
            var imagewithownerurlXMLParameter = imagewithownerurlXML != null ?
                new ObjectParameter("imagewithownerurlXML", imagewithownerurlXML) :
                new ObjectParameter("imagewithownerurlXML", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vehicleOwnTypeParameter = vehicleOwnType != null ?
                new ObjectParameter("VehicleOwnType", vehicleOwnType) :
                new ObjectParameter("VehicleOwnType", typeof(string));
    
            var isMobileVerifiedParameter = isMobileVerified != null ?
                new ObjectParameter("IsMobileVerified", isMobileVerified) :
                new ObjectParameter("IsMobileVerified", typeof(string));
    
            var verifytypeParameter = verifytype != null ?
                new ObjectParameter("verifytype", verifytype) :
                new ObjectParameter("verifytype", typeof(string));
    
            var sharedSMSParameter = sharedSMS != null ?
                new ObjectParameter("SharedSMS", sharedSMS) :
                new ObjectParameter("SharedSMS", typeof(string));
    
            var sharedByParameter = sharedBy.HasValue ?
                new ObjectParameter("SharedBy", sharedBy) :
                new ObjectParameter("SharedBy", typeof(long));
    
            var sharedDateTimeParameter = sharedDateTime.HasValue ?
                new ObjectParameter("SharedDateTime", sharedDateTime) :
                new ObjectParameter("SharedDateTime", typeof(System.DateTime));
    
            var sharedToParameter = sharedTo != null ?
                new ObjectParameter("SharedTo", sharedTo) :
                new ObjectParameter("SharedTo", typeof(string));
    
            var sMSDeliveredParameter = sMSDelivered != null ?
                new ObjectParameter("SMSDelivered", sMSDelivered) :
                new ObjectParameter("SMSDelivered", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProAddNewVisit", fovmIdParameter, nameParameter, mobileParameter, emailIdParameter, addressParameter, ownTypeParameter, vehicleTypeParameter, vehiclecapacityParameter, vehicleCountParameter, visitDateParameter, visitTimeParameter, latitudeParameter, longitudeParameter, visitingCardUrlParameter, activeFlagParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, stickeringStatusParameter, pLMIdParameter, fromLoctionParameter, toLocationParameter, viIdParameter, vehicleSizeParameter, xmlvehicleInfolistParameter, xmlprefloctaionlistParameter, modeParameter, fovidParameter, imagewithstickerurlParameter, imagewithownerurlParameter, enddateParameter, startdateParameter, companyParameter, visitingCardUrlXMLParameter, imagewithstickerurlXMLParameter, imagewithownerurlXMLParameter, useridParameter, statusParameter, remarksParameter, vehicleOwnTypeParameter, isMobileVerifiedParameter, verifytypeParameter, sharedSMSParameter, sharedByParameter, sharedDateTimeParameter, sharedToParameter, sMSDeliveredParameter);
        }
    
        public virtual ObjectResult<string> Proc_checkdownloadstatus(string mobile)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_checkdownloadstatus", mobileParameter);
        }
    
        public virtual ObjectResult<string> Proc_InsertNewLead(string mobile, string name, string businessName, string companyAddress, string location, string latitude, string longitude)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_InsertNewLead", mobileParameter, nameParameter, businessNameParameter, companyAddressParameter, locationParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<Proc_TruksupFOAppAPI_Result> Proc_TruksupFOAppAPI(string mode, string userName, string password, string type, Nullable<int> rid, string firstpage, string token, string userIP, string userMacAddress, string deviceName, string platfrom, Nullable<int> userId, string deviceid, string longitude, string lattitude, string mobile, string oTP, Nullable<int> user_id, Nullable<long> org, string msg, Nullable<long> cid, string usertype)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var firstpageParameter = firstpage != null ?
                new ObjectParameter("firstpage", firstpage) :
                new ObjectParameter("firstpage", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var userIPParameter = userIP != null ?
                new ObjectParameter("UserIP", userIP) :
                new ObjectParameter("UserIP", typeof(string));
    
            var userMacAddressParameter = userMacAddress != null ?
                new ObjectParameter("UserMacAddress", userMacAddress) :
                new ObjectParameter("UserMacAddress", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var platfromParameter = platfrom != null ?
                new ObjectParameter("Platfrom", platfrom) :
                new ObjectParameter("Platfrom", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var lattitudeParameter = lattitude != null ?
                new ObjectParameter("lattitude", lattitude) :
                new ObjectParameter("lattitude", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var orgParameter = org.HasValue ?
                new ObjectParameter("Org", org) :
                new ObjectParameter("Org", typeof(long));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(long));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_TruksupFOAppAPI_Result>("Proc_TruksupFOAppAPI", modeParameter, userNameParameter, passwordParameter, typeParameter, ridParameter, firstpageParameter, tokenParameter, userIPParameter, userMacAddressParameter, deviceNameParameter, platfromParameter, userIdParameter, deviceidParameter, longitudeParameter, lattitudeParameter, mobileParameter, oTPParameter, user_idParameter, orgParameter, msgParameter, cidParameter, usertypeParameter);
        }
    
        public virtual ObjectResult<ProcGetFodetails_Result> ProcGetFodetails(Nullable<long> foid)
        {
            var foidParameter = foid.HasValue ?
                new ObjectParameter("Foid", foid) :
                new ObjectParameter("Foid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetFodetails_Result>("ProcGetFodetails", foidParameter);
        }
    
        public virtual ObjectResult<ProUpdateVisitData_Result> ProUpdateVisitData(Nullable<long> fovmId, string name, string mobile, string emailId, string address, string ownType, string vehicleType, string vehiclecapacity, Nullable<int> vehicleCount, Nullable<System.DateTime> visitDate, string visitTime, string latitude, string longitude, string visitingCardUrl, Nullable<bool> activeFlag, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate, string stickeringStatus, Nullable<long> pLMId, string fromLoction, string toLocation, Nullable<long> viId, string vehicleSize, string xmlvehicleInfolist, string xmlprefloctaionlist, string mode, Nullable<long> fovid, string imagewithstickerurl, string imagewithownerurl, Nullable<System.DateTime> enddate, Nullable<System.DateTime> startdate, string company, string visitingCardUrlXML, string imagewithstickerurlXML, string imagewithownerurlXML, string updatefor, Nullable<long> updateid, string status, string remarks, string vehicleOwnType)
        {
            var fovmIdParameter = fovmId.HasValue ?
                new ObjectParameter("FovmId", fovmId) :
                new ObjectParameter("FovmId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ownTypeParameter = ownType != null ?
                new ObjectParameter("OwnType", ownType) :
                new ObjectParameter("OwnType", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehiclecapacityParameter = vehiclecapacity != null ?
                new ObjectParameter("Vehiclecapacity", vehiclecapacity) :
                new ObjectParameter("Vehiclecapacity", typeof(string));
    
            var vehicleCountParameter = vehicleCount.HasValue ?
                new ObjectParameter("VehicleCount", vehicleCount) :
                new ObjectParameter("VehicleCount", typeof(int));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var visitTimeParameter = visitTime != null ?
                new ObjectParameter("VisitTime", visitTime) :
                new ObjectParameter("VisitTime", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var visitingCardUrlParameter = visitingCardUrl != null ?
                new ObjectParameter("VisitingCardUrl", visitingCardUrl) :
                new ObjectParameter("VisitingCardUrl", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var stickeringStatusParameter = stickeringStatus != null ?
                new ObjectParameter("StickeringStatus", stickeringStatus) :
                new ObjectParameter("StickeringStatus", typeof(string));
    
            var pLMIdParameter = pLMId.HasValue ?
                new ObjectParameter("PLMId", pLMId) :
                new ObjectParameter("PLMId", typeof(long));
    
            var fromLoctionParameter = fromLoction != null ?
                new ObjectParameter("FromLoction", fromLoction) :
                new ObjectParameter("FromLoction", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("ViId", viId) :
                new ObjectParameter("ViId", typeof(long));
    
            var vehicleSizeParameter = vehicleSize != null ?
                new ObjectParameter("VehicleSize", vehicleSize) :
                new ObjectParameter("VehicleSize", typeof(string));
    
            var xmlvehicleInfolistParameter = xmlvehicleInfolist != null ?
                new ObjectParameter("xmlvehicleInfolist", xmlvehicleInfolist) :
                new ObjectParameter("xmlvehicleInfolist", typeof(string));
    
            var xmlprefloctaionlistParameter = xmlprefloctaionlist != null ?
                new ObjectParameter("xmlprefloctaionlist", xmlprefloctaionlist) :
                new ObjectParameter("xmlprefloctaionlist", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var fovidParameter = fovid.HasValue ?
                new ObjectParameter("fovid", fovid) :
                new ObjectParameter("fovid", typeof(long));
    
            var imagewithstickerurlParameter = imagewithstickerurl != null ?
                new ObjectParameter("imagewithstickerurl", imagewithstickerurl) :
                new ObjectParameter("imagewithstickerurl", typeof(string));
    
            var imagewithownerurlParameter = imagewithownerurl != null ?
                new ObjectParameter("imagewithownerurl", imagewithownerurl) :
                new ObjectParameter("imagewithownerurl", typeof(string));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var visitingCardUrlXMLParameter = visitingCardUrlXML != null ?
                new ObjectParameter("VisitingCardUrlXML", visitingCardUrlXML) :
                new ObjectParameter("VisitingCardUrlXML", typeof(string));
    
            var imagewithstickerurlXMLParameter = imagewithstickerurlXML != null ?
                new ObjectParameter("imagewithstickerurlXML", imagewithstickerurlXML) :
                new ObjectParameter("imagewithstickerurlXML", typeof(string));
    
            var imagewithownerurlXMLParameter = imagewithownerurlXML != null ?
                new ObjectParameter("imagewithownerurlXML", imagewithownerurlXML) :
                new ObjectParameter("imagewithownerurlXML", typeof(string));
    
            var updateforParameter = updatefor != null ?
                new ObjectParameter("updatefor", updatefor) :
                new ObjectParameter("updatefor", typeof(string));
    
            var updateidParameter = updateid.HasValue ?
                new ObjectParameter("updateid", updateid) :
                new ObjectParameter("updateid", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vehicleOwnTypeParameter = vehicleOwnType != null ?
                new ObjectParameter("VehicleOwnType", vehicleOwnType) :
                new ObjectParameter("VehicleOwnType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProUpdateVisitData_Result>("ProUpdateVisitData", fovmIdParameter, nameParameter, mobileParameter, emailIdParameter, addressParameter, ownTypeParameter, vehicleTypeParameter, vehiclecapacityParameter, vehicleCountParameter, visitDateParameter, visitTimeParameter, latitudeParameter, longitudeParameter, visitingCardUrlParameter, activeFlagParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, stickeringStatusParameter, pLMIdParameter, fromLoctionParameter, toLocationParameter, viIdParameter, vehicleSizeParameter, xmlvehicleInfolistParameter, xmlprefloctaionlistParameter, modeParameter, fovidParameter, imagewithstickerurlParameter, imagewithownerurlParameter, enddateParameter, startdateParameter, companyParameter, visitingCardUrlXMLParameter, imagewithstickerurlXMLParameter, imagewithownerurlXMLParameter, updateforParameter, updateidParameter, statusParameter, remarksParameter, vehicleOwnTypeParameter);
        }
    
        public virtual int SP_BrokerDataSendWebx(Nullable<int> fovmid, string mobileNo1)
        {
            var fovmidParameter = fovmid.HasValue ?
                new ObjectParameter("Fovmid", fovmid) :
                new ObjectParameter("Fovmid", typeof(int));
    
            var mobileNo1Parameter = mobileNo1 != null ?
                new ObjectParameter("MobileNo1", mobileNo1) :
                new ObjectParameter("MobileNo1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BrokerDataSendWebx", fovmidParameter, mobileNo1Parameter);
        }
    
        public virtual ObjectResult<string> Sp_FOAwsImageDetails(Nullable<int> fieldOfficerID, string brokerImagePath, string imagePath)
        {
            var fieldOfficerIDParameter = fieldOfficerID.HasValue ?
                new ObjectParameter("FieldOfficerID", fieldOfficerID) :
                new ObjectParameter("FieldOfficerID", typeof(int));
    
            var brokerImagePathParameter = brokerImagePath != null ?
                new ObjectParameter("BrokerImagePath", brokerImagePath) :
                new ObjectParameter("BrokerImagePath", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_FOAwsImageDetails", fieldOfficerIDParameter, brokerImagePathParameter, imagePathParameter);
        }
    
        public virtual int SP_GetBrokerDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetBrokerDetails");
        }
    
        public virtual int SP_GetStickerVisitReports(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<long> userid, Nullable<int> employeeType)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetStickerVisitReports", startdateParameter, enddateParameter, useridParameter, employeeTypeParameter);
        }
    
        public virtual ObjectResult<string> Sp_InsertmeetingDetails(Nullable<int> scheduledId, Nullable<int> fieldOfficerID, string fieldOfficerName, string brokerName, string mobileNumber, string alternatename, string alternateMobileNo, Nullable<bool> brokerMeet, Nullable<bool> loadGiven, string additionalComment, Nullable<System.DateTime> scheduledDate, string scheduledtime, Nullable<System.DateTime> completedDate, Nullable<bool> scheduled, Nullable<bool> completed, string createdBy, string updatedAt, string updatedby, string brokerImagePath, string userImagePath, string location, string gPS, string insurance, string fastTag, string buySell, string gift, string remarks, string address, string latitude, string longitude)
        {
            var scheduledIdParameter = scheduledId.HasValue ?
                new ObjectParameter("ScheduledId", scheduledId) :
                new ObjectParameter("ScheduledId", typeof(int));
    
            var fieldOfficerIDParameter = fieldOfficerID.HasValue ?
                new ObjectParameter("FieldOfficerID", fieldOfficerID) :
                new ObjectParameter("FieldOfficerID", typeof(int));
    
            var fieldOfficerNameParameter = fieldOfficerName != null ?
                new ObjectParameter("FieldOfficerName", fieldOfficerName) :
                new ObjectParameter("FieldOfficerName", typeof(string));
    
            var brokerNameParameter = brokerName != null ?
                new ObjectParameter("BrokerName", brokerName) :
                new ObjectParameter("BrokerName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var alternatenameParameter = alternatename != null ?
                new ObjectParameter("Alternatename", alternatename) :
                new ObjectParameter("Alternatename", typeof(string));
    
            var alternateMobileNoParameter = alternateMobileNo != null ?
                new ObjectParameter("AlternateMobileNo", alternateMobileNo) :
                new ObjectParameter("AlternateMobileNo", typeof(string));
    
            var brokerMeetParameter = brokerMeet.HasValue ?
                new ObjectParameter("BrokerMeet", brokerMeet) :
                new ObjectParameter("BrokerMeet", typeof(bool));
    
            var loadGivenParameter = loadGiven.HasValue ?
                new ObjectParameter("LoadGiven", loadGiven) :
                new ObjectParameter("LoadGiven", typeof(bool));
    
            var additionalCommentParameter = additionalComment != null ?
                new ObjectParameter("AdditionalComment", additionalComment) :
                new ObjectParameter("AdditionalComment", typeof(string));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("ScheduledDate", scheduledDate) :
                new ObjectParameter("ScheduledDate", typeof(System.DateTime));
    
            var scheduledtimeParameter = scheduledtime != null ?
                new ObjectParameter("Scheduledtime", scheduledtime) :
                new ObjectParameter("Scheduledtime", typeof(string));
    
            var completedDateParameter = completedDate.HasValue ?
                new ObjectParameter("CompletedDate", completedDate) :
                new ObjectParameter("CompletedDate", typeof(System.DateTime));
    
            var scheduledParameter = scheduled.HasValue ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(bool));
    
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedAtParameter = updatedAt != null ?
                new ObjectParameter("UpdatedAt", updatedAt) :
                new ObjectParameter("UpdatedAt", typeof(string));
    
            var updatedbyParameter = updatedby != null ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(string));
    
            var brokerImagePathParameter = brokerImagePath != null ?
                new ObjectParameter("BrokerImagePath", brokerImagePath) :
                new ObjectParameter("BrokerImagePath", typeof(string));
    
            var userImagePathParameter = userImagePath != null ?
                new ObjectParameter("UserImagePath", userImagePath) :
                new ObjectParameter("UserImagePath", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var gPSParameter = gPS != null ?
                new ObjectParameter("GPS", gPS) :
                new ObjectParameter("GPS", typeof(string));
    
            var insuranceParameter = insurance != null ?
                new ObjectParameter("Insurance", insurance) :
                new ObjectParameter("Insurance", typeof(string));
    
            var fastTagParameter = fastTag != null ?
                new ObjectParameter("FastTag", fastTag) :
                new ObjectParameter("FastTag", typeof(string));
    
            var buySellParameter = buySell != null ?
                new ObjectParameter("BuySell", buySell) :
                new ObjectParameter("BuySell", typeof(string));
    
            var giftParameter = gift != null ?
                new ObjectParameter("Gift", gift) :
                new ObjectParameter("Gift", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_InsertmeetingDetails", scheduledIdParameter, fieldOfficerIDParameter, fieldOfficerNameParameter, brokerNameParameter, mobileNumberParameter, alternatenameParameter, alternateMobileNoParameter, brokerMeetParameter, loadGivenParameter, additionalCommentParameter, scheduledDateParameter, scheduledtimeParameter, completedDateParameter, scheduledParameter, completedParameter, createdByParameter, updatedAtParameter, updatedbyParameter, brokerImagePathParameter, userImagePathParameter, locationParameter, gPSParameter, insuranceParameter, fastTagParameter, buySellParameter, giftParameter, remarksParameter, addressParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_StickerMasterDhaba(string dhabaName, string dhabaOwnerNumber, string address, string ownerName, string stickerImageName, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<long> createdBy, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string mode)
        {
            var dhabaNameParameter = dhabaName != null ?
                new ObjectParameter("DhabaName", dhabaName) :
                new ObjectParameter("DhabaName", typeof(string));
    
            var dhabaOwnerNumberParameter = dhabaOwnerNumber != null ?
                new ObjectParameter("DhabaOwnerNumber", dhabaOwnerNumber) :
                new ObjectParameter("DhabaOwnerNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var stickerImageNameParameter = stickerImageName != null ?
                new ObjectParameter("StickerImageName", stickerImageName) :
                new ObjectParameter("StickerImageName", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_StickerMasterDhaba", dhabaNameParameter, dhabaOwnerNumberParameter, addressParameter, ownerNameParameter, stickerImageNameParameter, latitudeParameter, longitudeParameter, createdByParameter, startDateParameter, endDateParameter, modeParameter);
        }
    
        public virtual ObjectResult<string> SP_StickerVisits(string fullName, string driverNumber, string operatorNumber, string downloads, string stickerImage, string stickerSize, string laneFrom, string laneTo, string vehicleType, string vehicleSize, string vehicleCapacity, string vechileNumber, Nullable<long> doneBy, string verifiedStatus, Nullable<long> verifiedBy, Nullable<long> createdBy, string mode, Nullable<long> userid, string localXML, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> id, string stickerDimension, string verificationComment, Nullable<int> start, Nullable<int> length, string searchValue)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var driverNumberParameter = driverNumber != null ?
                new ObjectParameter("DriverNumber", driverNumber) :
                new ObjectParameter("DriverNumber", typeof(string));
    
            var operatorNumberParameter = operatorNumber != null ?
                new ObjectParameter("OperatorNumber", operatorNumber) :
                new ObjectParameter("OperatorNumber", typeof(string));
    
            var downloadsParameter = downloads != null ?
                new ObjectParameter("Downloads", downloads) :
                new ObjectParameter("Downloads", typeof(string));
    
            var stickerImageParameter = stickerImage != null ?
                new ObjectParameter("StickerImage", stickerImage) :
                new ObjectParameter("StickerImage", typeof(string));
    
            var stickerSizeParameter = stickerSize != null ?
                new ObjectParameter("StickerSize", stickerSize) :
                new ObjectParameter("StickerSize", typeof(string));
    
            var laneFromParameter = laneFrom != null ?
                new ObjectParameter("LaneFrom", laneFrom) :
                new ObjectParameter("LaneFrom", typeof(string));
    
            var laneToParameter = laneTo != null ?
                new ObjectParameter("LaneTo", laneTo) :
                new ObjectParameter("LaneTo", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehicleSizeParameter = vehicleSize != null ?
                new ObjectParameter("VehicleSize", vehicleSize) :
                new ObjectParameter("VehicleSize", typeof(string));
    
            var vehicleCapacityParameter = vehicleCapacity != null ?
                new ObjectParameter("VehicleCapacity", vehicleCapacity) :
                new ObjectParameter("VehicleCapacity", typeof(string));
    
            var vechileNumberParameter = vechileNumber != null ?
                new ObjectParameter("VechileNumber", vechileNumber) :
                new ObjectParameter("VechileNumber", typeof(string));
    
            var doneByParameter = doneBy.HasValue ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(long));
    
            var verifiedStatusParameter = verifiedStatus != null ?
                new ObjectParameter("VerifiedStatus", verifiedStatus) :
                new ObjectParameter("VerifiedStatus", typeof(string));
    
            var verifiedByParameter = verifiedBy.HasValue ?
                new ObjectParameter("VerifiedBy", verifiedBy) :
                new ObjectParameter("VerifiedBy", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(long));
    
            var localXMLParameter = localXML != null ?
                new ObjectParameter("LocalXML", localXML) :
                new ObjectParameter("LocalXML", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var stickerDimensionParameter = stickerDimension != null ?
                new ObjectParameter("StickerDimension", stickerDimension) :
                new ObjectParameter("StickerDimension", typeof(string));
    
            var verificationCommentParameter = verificationComment != null ?
                new ObjectParameter("VerificationComment", verificationComment) :
                new ObjectParameter("VerificationComment", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_StickerVisits", fullNameParameter, driverNumberParameter, operatorNumberParameter, downloadsParameter, stickerImageParameter, stickerSizeParameter, laneFromParameter, laneToParameter, vehicleTypeParameter, vehicleSizeParameter, vehicleCapacityParameter, vechileNumberParameter, doneByParameter, verifiedStatusParameter, verifiedByParameter, createdByParameter, modeParameter, useridParameter, localXMLParameter, startdateParameter, enddateParameter, idParameter, stickerDimensionParameter, verificationCommentParameter, startParameter, lengthParameter, searchValueParameter);
        }
    
        public virtual int Sp_UpdateFOAwsImages(Nullable<int> scheduledId, string brokerImagePath)
        {
            var scheduledIdParameter = scheduledId.HasValue ?
                new ObjectParameter("ScheduledId", scheduledId) :
                new ObjectParameter("ScheduledId", typeof(int));
    
            var brokerImagePathParameter = brokerImagePath != null ?
                new ObjectParameter("BrokerImagePath", brokerImagePath) :
                new ObjectParameter("BrokerImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateFOAwsImages", scheduledIdParameter, brokerImagePathParameter);
        }
    
        public virtual ObjectResult<string> Sp_updateFoDetails(string name, string mobile, string altMobile, string email, string fullAddress, Nullable<long> employeeID, Nullable<int> employeeType, Nullable<long> createdBy, Nullable<long> fieldOfficerid, string profileImage)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var altMobileParameter = altMobile != null ?
                new ObjectParameter("AltMobile", altMobile) :
                new ObjectParameter("AltMobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fullAddressParameter = fullAddress != null ?
                new ObjectParameter("FullAddress", fullAddress) :
                new ObjectParameter("FullAddress", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var fieldOfficeridParameter = fieldOfficerid.HasValue ?
                new ObjectParameter("FieldOfficerid", fieldOfficerid) :
                new ObjectParameter("FieldOfficerid", typeof(long));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_updateFoDetails", nameParameter, mobileParameter, altMobileParameter, emailParameter, fullAddressParameter, employeeIDParameter, employeeTypeParameter, createdByParameter, fieldOfficeridParameter, profileImageParameter);
        }
    
        public virtual ObjectResult<string> SP_UpdateFOLocation(Nullable<long> fieldOfficerID, string requestID, string locationList)
        {
            var fieldOfficerIDParameter = fieldOfficerID.HasValue ?
                new ObjectParameter("FieldOfficerID", fieldOfficerID) :
                new ObjectParameter("FieldOfficerID", typeof(long));
    
            var requestIDParameter = requestID != null ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(string));
    
            var locationListParameter = locationList != null ?
                new ObjectParameter("LocationList", locationList) :
                new ObjectParameter("LocationList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UpdateFOLocation", fieldOfficerIDParameter, requestIDParameter, locationListParameter);
        }
    
        public virtual ObjectResult<SP_VerificationData_Result> SP_VerificationData(Nullable<long> doneby, Nullable<int> status, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> start, Nullable<int> length)
        {
            var donebyParameter = doneby.HasValue ?
                new ObjectParameter("doneby", doneby) :
                new ObjectParameter("doneby", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerificationData_Result>("SP_VerificationData", donebyParameter, statusParameter, startdateParameter, enddateParameter, startParameter, lengthParameter);
        }
    
        public virtual ObjectResult<spGetStickerDataListhandler_Result> spGetStickerDataListhandler(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortDir, string search, string startdate, string enddate, string userid)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStickerDataListhandler_Result>("spGetStickerDataListhandler", displayLengthParameter, displayStartParameter, sortColParameter, sortDirParameter, searchParameter, startdateParameter, enddateParameter, useridParameter);
        }
    }
}
