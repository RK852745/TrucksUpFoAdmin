//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrucksUpFoAdmin.DbContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FieldOfficerEntities : DbContext
    {
        public FieldOfficerEntities()
            : base("name=FieldOfficerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FieldOfficerMaster> FieldOfficerMasters { get; set; }
        public virtual DbSet<FieldOfficerVisitMaster> FieldOfficerVisitMasters { get; set; }
        public virtual DbSet<OwnerInfoMaster> OwnerInfoMasters { get; set; }
        public virtual DbSet<PreferredLocationMaster> PreferredLocationMasters { get; set; }
        public virtual DbSet<SharedLinkAudit> SharedLinkAudits { get; set; }
        public virtual DbSet<SQL_Error> SQL_Error { get; set; }
        public virtual DbSet<StickerMaster> StickerMasters { get; set; }
        public virtual DbSet<TruksupFOMobileNavigator> TruksupFOMobileNavigators { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserLoginToken> UserLoginTokens { get; set; }
        public virtual DbSet<VehicleInfoMaster> VehicleInfoMasters { get; set; }
        public virtual DbSet<VisitingCardMaster> VisitingCardMasters { get; set; }
        public virtual DbSet<GeoLocationCordinate> GeoLocationCordinates { get; set; }
    
        [DbFunction("FieldOfficerEntities", "GetfieldofficerName")]
        public virtual IQueryable<GetfieldofficerName_Result> GetfieldofficerName(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetfieldofficerName_Result>("[FieldOfficerEntities].[GetfieldofficerName](@id)", idParameter);
        }
    
        public virtual ObjectResult<AdminDasboardMaster_Result> AdminDasboardMaster(string mode, Nullable<long> userId, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<long> fomid, string totalvisit, string owntype, string svisit, Nullable<long> fovmId, string name, string mobile, string altMobile, string email, string fullAddress, string employeeID, Nullable<long> ececutiveId, Nullable<long> createdBy, Nullable<long> executiveId, string username, string password, string xmluseridlist, string status, Nullable<int> employeeType, string remarks, Nullable<int> start, Nullable<int> length, string searchValue)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var fomidParameter = fomid.HasValue ?
                new ObjectParameter("fomid", fomid) :
                new ObjectParameter("fomid", typeof(long));
    
            var totalvisitParameter = totalvisit != null ?
                new ObjectParameter("totalvisit", totalvisit) :
                new ObjectParameter("totalvisit", typeof(string));
    
            var owntypeParameter = owntype != null ?
                new ObjectParameter("owntype", owntype) :
                new ObjectParameter("owntype", typeof(string));
    
            var svisitParameter = svisit != null ?
                new ObjectParameter("svisit", svisit) :
                new ObjectParameter("svisit", typeof(string));
    
            var fovmIdParameter = fovmId.HasValue ?
                new ObjectParameter("FovmId", fovmId) :
                new ObjectParameter("FovmId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var altMobileParameter = altMobile != null ?
                new ObjectParameter("AltMobile", altMobile) :
                new ObjectParameter("AltMobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fullAddressParameter = fullAddress != null ?
                new ObjectParameter("FullAddress", fullAddress) :
                new ObjectParameter("FullAddress", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var ececutiveIdParameter = ececutiveId.HasValue ?
                new ObjectParameter("EcecutiveId", ececutiveId) :
                new ObjectParameter("EcecutiveId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var executiveIdParameter = executiveId.HasValue ?
                new ObjectParameter("ExecutiveId", executiveId) :
                new ObjectParameter("ExecutiveId", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var xmluseridlistParameter = xmluseridlist != null ?
                new ObjectParameter("xmluseridlist", xmluseridlist) :
                new ObjectParameter("xmluseridlist", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminDasboardMaster_Result>("AdminDasboardMaster", modeParameter, userIdParameter, startdateParameter, enddateParameter, fomidParameter, totalvisitParameter, owntypeParameter, svisitParameter, fovmIdParameter, nameParameter, mobileParameter, altMobileParameter, emailParameter, fullAddressParameter, employeeIDParameter, ececutiveIdParameter, createdByParameter, executiveIdParameter, usernameParameter, passwordParameter, xmluseridlistParameter, statusParameter, employeeTypeParameter, remarksParameter, startParameter, lengthParameter, searchValueParameter);
        }
    
        public virtual ObjectResult<string> Pro_GetEncrptedKey(string mode)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pro_GetEncrptedKey", modeParameter);
        }
    
        public virtual int Pro_SQL_Error(string errorNumber, string errorState, string errorSeverity, string errorProcedure, string errorLine, string errorMessage)
        {
            var errorNumberParameter = errorNumber != null ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(string));
    
            var errorStateParameter = errorState != null ?
                new ObjectParameter("ErrorState", errorState) :
                new ObjectParameter("ErrorState", typeof(string));
    
            var errorSeverityParameter = errorSeverity != null ?
                new ObjectParameter("ErrorSeverity", errorSeverity) :
                new ObjectParameter("ErrorSeverity", typeof(string));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorLineParameter = errorLine != null ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pro_SQL_Error", errorNumberParameter, errorStateParameter, errorSeverityParameter, errorProcedureParameter, errorLineParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<Pro_UserLogin_Result> Pro_UserLogin(string token, string mode, string userIP, string userMacAddress, string deviceName, string platfrom, string username, string loginPin, string password, Nullable<int> userId, Nullable<int> partnerId, Nullable<long> org, Nullable<long> bid, Nullable<long> clientId)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var userIPParameter = userIP != null ?
                new ObjectParameter("UserIP", userIP) :
                new ObjectParameter("UserIP", typeof(string));
    
            var userMacAddressParameter = userMacAddress != null ?
                new ObjectParameter("UserMacAddress", userMacAddress) :
                new ObjectParameter("UserMacAddress", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var platfromParameter = platfrom != null ?
                new ObjectParameter("Platfrom", platfrom) :
                new ObjectParameter("Platfrom", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var loginPinParameter = loginPin != null ?
                new ObjectParameter("LoginPin", loginPin) :
                new ObjectParameter("LoginPin", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var orgParameter = org.HasValue ?
                new ObjectParameter("Org", org) :
                new ObjectParameter("Org", typeof(long));
    
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pro_UserLogin_Result>("Pro_UserLogin", tokenParameter, modeParameter, userIPParameter, userMacAddressParameter, deviceNameParameter, platfromParameter, usernameParameter, loginPinParameter, passwordParameter, userIdParameter, partnerIdParameter, orgParameter, bidParameter, clientIdParameter);
        }
    
        public virtual int ProAddNewVisit(Nullable<long> fovmId, string name, string mobile, string emailId, string address, string ownType, string vehicleType, string vehiclecapacity, Nullable<int> vehicleCount, Nullable<System.DateTime> visitDate, string visitTime, string latitude, string longitude, string visitingCardUrl, Nullable<bool> activeFlag, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate, string stickeringStatus, Nullable<long> pLMId, string fromLoction, string toLocation, Nullable<long> viId, string vehicleSize, string xmlvehicleInfolist, string xmlprefloctaionlist, string mode, Nullable<long> fovid, string imagewithstickerurl, string imagewithownerurl, Nullable<System.DateTime> enddate, Nullable<System.DateTime> startdate, string company, string visitingCardUrlXML, string imagewithstickerurlXML, string imagewithownerurlXML, Nullable<long> userid, string status, string remarks, string vehicleOwnType, string isMobileVerified, string verifytype, string sharedSMS, Nullable<long> sharedBy, Nullable<System.DateTime> sharedDateTime, string sharedTo, string sMSDelivered)
        {
            var fovmIdParameter = fovmId.HasValue ?
                new ObjectParameter("FovmId", fovmId) :
                new ObjectParameter("FovmId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ownTypeParameter = ownType != null ?
                new ObjectParameter("OwnType", ownType) :
                new ObjectParameter("OwnType", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehiclecapacityParameter = vehiclecapacity != null ?
                new ObjectParameter("Vehiclecapacity", vehiclecapacity) :
                new ObjectParameter("Vehiclecapacity", typeof(string));
    
            var vehicleCountParameter = vehicleCount.HasValue ?
                new ObjectParameter("VehicleCount", vehicleCount) :
                new ObjectParameter("VehicleCount", typeof(int));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var visitTimeParameter = visitTime != null ?
                new ObjectParameter("VisitTime", visitTime) :
                new ObjectParameter("VisitTime", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var visitingCardUrlParameter = visitingCardUrl != null ?
                new ObjectParameter("VisitingCardUrl", visitingCardUrl) :
                new ObjectParameter("VisitingCardUrl", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var stickeringStatusParameter = stickeringStatus != null ?
                new ObjectParameter("StickeringStatus", stickeringStatus) :
                new ObjectParameter("StickeringStatus", typeof(string));
    
            var pLMIdParameter = pLMId.HasValue ?
                new ObjectParameter("PLMId", pLMId) :
                new ObjectParameter("PLMId", typeof(long));
    
            var fromLoctionParameter = fromLoction != null ?
                new ObjectParameter("FromLoction", fromLoction) :
                new ObjectParameter("FromLoction", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("ViId", viId) :
                new ObjectParameter("ViId", typeof(long));
    
            var vehicleSizeParameter = vehicleSize != null ?
                new ObjectParameter("VehicleSize", vehicleSize) :
                new ObjectParameter("VehicleSize", typeof(string));
    
            var xmlvehicleInfolistParameter = xmlvehicleInfolist != null ?
                new ObjectParameter("xmlvehicleInfolist", xmlvehicleInfolist) :
                new ObjectParameter("xmlvehicleInfolist", typeof(string));
    
            var xmlprefloctaionlistParameter = xmlprefloctaionlist != null ?
                new ObjectParameter("xmlprefloctaionlist", xmlprefloctaionlist) :
                new ObjectParameter("xmlprefloctaionlist", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var fovidParameter = fovid.HasValue ?
                new ObjectParameter("fovid", fovid) :
                new ObjectParameter("fovid", typeof(long));
    
            var imagewithstickerurlParameter = imagewithstickerurl != null ?
                new ObjectParameter("imagewithstickerurl", imagewithstickerurl) :
                new ObjectParameter("imagewithstickerurl", typeof(string));
    
            var imagewithownerurlParameter = imagewithownerurl != null ?
                new ObjectParameter("imagewithownerurl", imagewithownerurl) :
                new ObjectParameter("imagewithownerurl", typeof(string));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var visitingCardUrlXMLParameter = visitingCardUrlXML != null ?
                new ObjectParameter("VisitingCardUrlXML", visitingCardUrlXML) :
                new ObjectParameter("VisitingCardUrlXML", typeof(string));
    
            var imagewithstickerurlXMLParameter = imagewithstickerurlXML != null ?
                new ObjectParameter("imagewithstickerurlXML", imagewithstickerurlXML) :
                new ObjectParameter("imagewithstickerurlXML", typeof(string));
    
            var imagewithownerurlXMLParameter = imagewithownerurlXML != null ?
                new ObjectParameter("imagewithownerurlXML", imagewithownerurlXML) :
                new ObjectParameter("imagewithownerurlXML", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vehicleOwnTypeParameter = vehicleOwnType != null ?
                new ObjectParameter("VehicleOwnType", vehicleOwnType) :
                new ObjectParameter("VehicleOwnType", typeof(string));
    
            var isMobileVerifiedParameter = isMobileVerified != null ?
                new ObjectParameter("IsMobileVerified", isMobileVerified) :
                new ObjectParameter("IsMobileVerified", typeof(string));
    
            var verifytypeParameter = verifytype != null ?
                new ObjectParameter("verifytype", verifytype) :
                new ObjectParameter("verifytype", typeof(string));
    
            var sharedSMSParameter = sharedSMS != null ?
                new ObjectParameter("SharedSMS", sharedSMS) :
                new ObjectParameter("SharedSMS", typeof(string));
    
            var sharedByParameter = sharedBy.HasValue ?
                new ObjectParameter("SharedBy", sharedBy) :
                new ObjectParameter("SharedBy", typeof(long));
    
            var sharedDateTimeParameter = sharedDateTime.HasValue ?
                new ObjectParameter("SharedDateTime", sharedDateTime) :
                new ObjectParameter("SharedDateTime", typeof(System.DateTime));
    
            var sharedToParameter = sharedTo != null ?
                new ObjectParameter("SharedTo", sharedTo) :
                new ObjectParameter("SharedTo", typeof(string));
    
            var sMSDeliveredParameter = sMSDelivered != null ?
                new ObjectParameter("SMSDelivered", sMSDelivered) :
                new ObjectParameter("SMSDelivered", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProAddNewVisit", fovmIdParameter, nameParameter, mobileParameter, emailIdParameter, addressParameter, ownTypeParameter, vehicleTypeParameter, vehiclecapacityParameter, vehicleCountParameter, visitDateParameter, visitTimeParameter, latitudeParameter, longitudeParameter, visitingCardUrlParameter, activeFlagParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, stickeringStatusParameter, pLMIdParameter, fromLoctionParameter, toLocationParameter, viIdParameter, vehicleSizeParameter, xmlvehicleInfolistParameter, xmlprefloctaionlistParameter, modeParameter, fovidParameter, imagewithstickerurlParameter, imagewithownerurlParameter, enddateParameter, startdateParameter, companyParameter, visitingCardUrlXMLParameter, imagewithstickerurlXMLParameter, imagewithownerurlXMLParameter, useridParameter, statusParameter, remarksParameter, vehicleOwnTypeParameter, isMobileVerifiedParameter, verifytypeParameter, sharedSMSParameter, sharedByParameter, sharedDateTimeParameter, sharedToParameter, sMSDeliveredParameter);
        }
    
        public virtual ObjectResult<Proc_AdminLogin_Result> Proc_AdminLogin(string username, string password, string userIP, string userMacAddress, string platfrom, string deviceName)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userIPParameter = userIP != null ?
                new ObjectParameter("UserIP", userIP) :
                new ObjectParameter("UserIP", typeof(string));
    
            var userMacAddressParameter = userMacAddress != null ?
                new ObjectParameter("UserMacAddress", userMacAddress) :
                new ObjectParameter("UserMacAddress", typeof(string));
    
            var platfromParameter = platfrom != null ?
                new ObjectParameter("Platfrom", platfrom) :
                new ObjectParameter("Platfrom", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_AdminLogin_Result>("Proc_AdminLogin", usernameParameter, passwordParameter, userIPParameter, userMacAddressParameter, platfromParameter, deviceNameParameter);
        }
    
        public virtual int Proc_TruksupFOAppAPI(string mode, string userName, string password, string type, Nullable<int> rid, string firstpage, string token, string userIP, string userMacAddress, string deviceName, string platfrom, Nullable<int> userId, string deviceid, string longitude, string lattitude, string mobile, string oTP, Nullable<int> user_id, Nullable<long> org, string msg, Nullable<long> cid, string usertype)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var firstpageParameter = firstpage != null ?
                new ObjectParameter("firstpage", firstpage) :
                new ObjectParameter("firstpage", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var userIPParameter = userIP != null ?
                new ObjectParameter("UserIP", userIP) :
                new ObjectParameter("UserIP", typeof(string));
    
            var userMacAddressParameter = userMacAddress != null ?
                new ObjectParameter("UserMacAddress", userMacAddress) :
                new ObjectParameter("UserMacAddress", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var platfromParameter = platfrom != null ?
                new ObjectParameter("Platfrom", platfrom) :
                new ObjectParameter("Platfrom", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var lattitudeParameter = lattitude != null ?
                new ObjectParameter("lattitude", lattitude) :
                new ObjectParameter("lattitude", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var orgParameter = org.HasValue ?
                new ObjectParameter("Org", org) :
                new ObjectParameter("Org", typeof(long));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(long));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_TruksupFOAppAPI", modeParameter, userNameParameter, passwordParameter, typeParameter, ridParameter, firstpageParameter, tokenParameter, userIPParameter, userMacAddressParameter, deviceNameParameter, platfromParameter, userIdParameter, deviceidParameter, longitudeParameter, lattitudeParameter, mobileParameter, oTPParameter, user_idParameter, orgParameter, msgParameter, cidParameter, usertypeParameter);
        }
    
        public virtual ObjectResult<ProUpdateVisitData_Result> ProUpdateVisitData(Nullable<long> fovmId, string name, string mobile, string emailId, string address, string ownType, string vehicleType, string vehiclecapacity, Nullable<int> vehicleCount, Nullable<System.DateTime> visitDate, string visitTime, string latitude, string longitude, string visitingCardUrl, Nullable<bool> activeFlag, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate, string stickeringStatus, Nullable<long> pLMId, string fromLoction, string toLocation, Nullable<long> viId, string vehicleSize, string xmlvehicleInfolist, string xmlprefloctaionlist, string mode, Nullable<long> fovid, string imagewithstickerurl, string imagewithownerurl, Nullable<System.DateTime> enddate, Nullable<System.DateTime> startdate, string company, string visitingCardUrlXML, string imagewithstickerurlXML, string imagewithownerurlXML, string updatefor, Nullable<long> updateid, string status, string remarks, string vehicleOwnType)
        {
            var fovmIdParameter = fovmId.HasValue ?
                new ObjectParameter("FovmId", fovmId) :
                new ObjectParameter("FovmId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ownTypeParameter = ownType != null ?
                new ObjectParameter("OwnType", ownType) :
                new ObjectParameter("OwnType", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var vehiclecapacityParameter = vehiclecapacity != null ?
                new ObjectParameter("Vehiclecapacity", vehiclecapacity) :
                new ObjectParameter("Vehiclecapacity", typeof(string));
    
            var vehicleCountParameter = vehicleCount.HasValue ?
                new ObjectParameter("VehicleCount", vehicleCount) :
                new ObjectParameter("VehicleCount", typeof(int));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var visitTimeParameter = visitTime != null ?
                new ObjectParameter("VisitTime", visitTime) :
                new ObjectParameter("VisitTime", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var visitingCardUrlParameter = visitingCardUrl != null ?
                new ObjectParameter("VisitingCardUrl", visitingCardUrl) :
                new ObjectParameter("VisitingCardUrl", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var stickeringStatusParameter = stickeringStatus != null ?
                new ObjectParameter("StickeringStatus", stickeringStatus) :
                new ObjectParameter("StickeringStatus", typeof(string));
    
            var pLMIdParameter = pLMId.HasValue ?
                new ObjectParameter("PLMId", pLMId) :
                new ObjectParameter("PLMId", typeof(long));
    
            var fromLoctionParameter = fromLoction != null ?
                new ObjectParameter("FromLoction", fromLoction) :
                new ObjectParameter("FromLoction", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("ViId", viId) :
                new ObjectParameter("ViId", typeof(long));
    
            var vehicleSizeParameter = vehicleSize != null ?
                new ObjectParameter("VehicleSize", vehicleSize) :
                new ObjectParameter("VehicleSize", typeof(string));
    
            var xmlvehicleInfolistParameter = xmlvehicleInfolist != null ?
                new ObjectParameter("xmlvehicleInfolist", xmlvehicleInfolist) :
                new ObjectParameter("xmlvehicleInfolist", typeof(string));
    
            var xmlprefloctaionlistParameter = xmlprefloctaionlist != null ?
                new ObjectParameter("xmlprefloctaionlist", xmlprefloctaionlist) :
                new ObjectParameter("xmlprefloctaionlist", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var fovidParameter = fovid.HasValue ?
                new ObjectParameter("fovid", fovid) :
                new ObjectParameter("fovid", typeof(long));
    
            var imagewithstickerurlParameter = imagewithstickerurl != null ?
                new ObjectParameter("imagewithstickerurl", imagewithstickerurl) :
                new ObjectParameter("imagewithstickerurl", typeof(string));
    
            var imagewithownerurlParameter = imagewithownerurl != null ?
                new ObjectParameter("imagewithownerurl", imagewithownerurl) :
                new ObjectParameter("imagewithownerurl", typeof(string));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var visitingCardUrlXMLParameter = visitingCardUrlXML != null ?
                new ObjectParameter("VisitingCardUrlXML", visitingCardUrlXML) :
                new ObjectParameter("VisitingCardUrlXML", typeof(string));
    
            var imagewithstickerurlXMLParameter = imagewithstickerurlXML != null ?
                new ObjectParameter("imagewithstickerurlXML", imagewithstickerurlXML) :
                new ObjectParameter("imagewithstickerurlXML", typeof(string));
    
            var imagewithownerurlXMLParameter = imagewithownerurlXML != null ?
                new ObjectParameter("imagewithownerurlXML", imagewithownerurlXML) :
                new ObjectParameter("imagewithownerurlXML", typeof(string));
    
            var updateforParameter = updatefor != null ?
                new ObjectParameter("updatefor", updatefor) :
                new ObjectParameter("updatefor", typeof(string));
    
            var updateidParameter = updateid.HasValue ?
                new ObjectParameter("updateid", updateid) :
                new ObjectParameter("updateid", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vehicleOwnTypeParameter = vehicleOwnType != null ?
                new ObjectParameter("VehicleOwnType", vehicleOwnType) :
                new ObjectParameter("VehicleOwnType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProUpdateVisitData_Result>("ProUpdateVisitData", fovmIdParameter, nameParameter, mobileParameter, emailIdParameter, addressParameter, ownTypeParameter, vehicleTypeParameter, vehiclecapacityParameter, vehicleCountParameter, visitDateParameter, visitTimeParameter, latitudeParameter, longitudeParameter, visitingCardUrlParameter, activeFlagParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, stickeringStatusParameter, pLMIdParameter, fromLoctionParameter, toLocationParameter, viIdParameter, vehicleSizeParameter, xmlvehicleInfolistParameter, xmlprefloctaionlistParameter, modeParameter, fovidParameter, imagewithstickerurlParameter, imagewithownerurlParameter, enddateParameter, startdateParameter, companyParameter, visitingCardUrlXMLParameter, imagewithstickerurlXMLParameter, imagewithownerurlXMLParameter, updateforParameter, updateidParameter, statusParameter, remarksParameter, vehicleOwnTypeParameter);
        }
    
        public virtual ObjectResult<AdminDasboardData_Result> AdminDasboardData(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<long> fomid, string totalvisit, string owntype, string status)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var fomidParameter = fomid.HasValue ?
                new ObjectParameter("fomid", fomid) :
                new ObjectParameter("fomid", typeof(long));
    
            var totalvisitParameter = totalvisit != null ?
                new ObjectParameter("totalvisit", totalvisit) :
                new ObjectParameter("totalvisit", typeof(string));
    
            var owntypeParameter = owntype != null ?
                new ObjectParameter("owntype", owntype) :
                new ObjectParameter("owntype", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminDasboardData_Result>("AdminDasboardData", startdateParameter, enddateParameter, fomidParameter, totalvisitParameter, owntypeParameter, statusParameter);
        }
    
        public virtual ObjectResult<getAdminDetails_Result> getAdminDetails(string token, Nullable<long> userid)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAdminDetails_Result>("getAdminDetails", tokenParameter, useridParameter);
        }
    
        public virtual ObjectResult<getadmindatabydate_Result> getadmindatabydate(string startdate, string enddate)
        {
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getadmindatabydate_Result>("getadmindatabydate", startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<SP_VerificationData_Result> SP_VerificationData(Nullable<long> doneby, Nullable<int> status, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> start, Nullable<int> length)
        {
            var donebyParameter = doneby.HasValue ?
                new ObjectParameter("doneby", doneby) :
                new ObjectParameter("doneby", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerificationData_Result>("SP_VerificationData", donebyParameter, statusParameter, startdateParameter, enddateParameter, startParameter, lengthParameter);
        }
    }
}
